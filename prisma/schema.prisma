generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

 

 

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  canComment        Boolean @default(true)
  phonenumber           String?
  address           String?
  postcode           String?
  hashedPassword  String?
   isAdmin         Boolean @default(false)
  isInstructor         Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  boughtCourses    String[] @db.ObjectId

  hashedToken   HashedToken[]
   purchuses Purchuses[]
   messageChatt MessageChatt[]
      roomId       Int?

  
  
  accounts Account[]
 userCourse UserCourse[]
 comments Comments[]
 reply Reply[]
  
}
 model HashedToken{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String?  @db.ObjectId
             user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
             randomgeneratedCode   String?
               
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt


 }

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  userCourse UserCourse[]

}
 
model UserCourse {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
 name            String? 
  image           String?
  coverVideo       String?
  userId         String? @db.ObjectId
         user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  view           Int   @default(0)
  address       String?
  postcode      String?
  phonenumber     String?
  prviousPrice     Float?    @default(0)
 
  price            Float?
  isPublished    Boolean @default(false)
  isFree         Boolean @default(false)
  description     String?
   categoryId    String?   @db.ObjectId
         category Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)


   userCoursePart   UserCoursePart[] 
   
   
   comments   Comments[] 
      purchuses Purchuses[]


  chapterCunt            String?


  
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt


  
 
  
}
model UserCoursePart {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  
  name             String  
  name1            String?  
  
  videoUrl           String?  
  resoursesLink      String?

  name2          String? 
  videoUrl2          String? 
  
         
  name3          String?  
  videoUrl3          String?  
  
  videoDuration        String?  
  description           String?
 
  userCourseId       String? @db.ObjectId
 userCourse UserCourse? @relation(fields: [userCourseId], references: [id], onDelete: Cascade)

 
  
  
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  
 
  
}


model Comments{
    id              String @id @default(auto()) @map("_id") @db.ObjectId
    text     String?
      createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isHidded         Boolean @default(false)
 
     userId String?  @db.ObjectId
             user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
    userCourseId       String? @db.ObjectId
 userCourse UserCourse? @relation(fields: [userCourseId], references: [id], onDelete: Cascade)
 reply   Reply[]

  




}
model Reply{
      id              String @id @default(auto()) @map("_id") @db.ObjectId
      commentId  String?  @db.ObjectId
       comments Comments? @relation(fields: [commentId], references: [id], onDelete: Cascade)
       text     String
         userId         String? @db.ObjectId
         user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
        
        createdAt       DateTime @default(now())

  updatedAt       DateTime @updatedAt



}
 

 
model MessageChatt{
      id              String @id @default(auto()) @map("_id") @db.ObjectId
      userId         String? @db.ObjectId
      user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
      text    String?
      roomId     String?  @db.ObjectId
       readByAdmin  Boolean @default(false)
      readByUser  Boolean @default(false)
    
       
          createdAt       DateTime @default(now())

  updatedAt       DateTime @updatedAt

}





model MessageNotification{
  
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  message1      String

  isShowed      Boolean @default(false)

    
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt



}
model ImageSlider{
    id              String @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl      String

  isShowed      Boolean @default(false)

    
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

}
model Purchuses{
      id              String @id @default(auto()) @map("_id") @db.ObjectId
      price   String?
      isFree   Boolean @default(false)
       userId         String? @db.ObjectId
         user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
              userCourseId      String? @db.ObjectId
         userCourse UserCourse? @relation(fields: [userCourseId], references: [id], onDelete: Cascade)
         teacherId    String?


    
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

}



